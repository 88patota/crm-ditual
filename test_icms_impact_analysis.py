#!/usr/bin/env python3
"""
Test to analyze what should change when ICMS percentage changes
and verify if the correct values are being displayed to the user.
"""

import sys
import requests
import json

def test_icms_impact_detailed():
    """
    Detailed analysis of what changes when ICMS percentage changes
    """
    print("=== AN√ÅLISE DETALHADA: IMPACTO DA MUDAN√áA DE ICMS ===")
    print()
    
    base_url = "http://localhost:8002"
    
    # Base test data
    base_item = {
        "description": "Produto Teste",
        "peso_compra": 100.0,
        "peso_venda": 100.0,
        "valor_com_icms_compra": 10.00,  # R$ 10/kg WITH ICMS
        "percentual_icms_compra": 0.18,  # 18%
        "outras_despesas_item": 0.0,
        "valor_com_icms_venda": 15.00,   # R$ 15/kg WITH ICMS
        "percentual_icms_venda": 0.18    # 18% (will be changed)
    }
    
    scenarios = [
        {"icms": 0.17, "label": "17%"},
        {"icms": 0.18, "label": "18%"},
        {"icms": 0.20, "label": "20%"},
        {"icms": 0.25, "label": "25%"}
    ]
    
    print("Dados base:")
    print(f"  Peso venda: {base_item['peso_venda']} kg")
    print(f"  Valor COM ICMS venda: R$ {base_item['valor_com_icms_venda']}/kg")
    print()
    
    results = []
    
    for scenario in scenarios:
        print(f"--- Testando ICMS {scenario['label']} ---")
        
        # Create test data with modified ICMS
        test_data = {
            "client_name": "Cliente Teste",
            "items": [base_item.copy()]
        }
        test_data["items"][0]["percentual_icms_venda"] = scenario["icms"]
        
        try:
            response = requests.post(
                f"{base_url}/api/v1/budgets/calculate-simplified",
                json=test_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # Extract calculated values
                item_calc = result['items_calculations'][0] if result['items_calculations'] else {}
                
                analysis = {
                    "icms_percentage": scenario['label'],
                    "icms_decimal": scenario['icms'],
                    
                    # API Response Fields
                    "total_sale_value": result.get('total_sale_value', 0),  # From API
                    "total_purchase_value": result.get('total_purchase_value', 0),
                    "total_commission": result.get('total_commission', 0),
                    "markup_percentage": result.get('markup_percentage', 0),
                    
                    # Item-level calculations
                    "item_total_sale": item_calc.get('total_sale', 0),
                    "item_total_purchase": item_calc.get('total_purchase', 0),
                    "item_profitability": item_calc.get('profitability', 0),
                    "item_commission": item_calc.get('commission_value', 0),
                }
                
                # Manual calculations for comparison
                valor_sem_icms_venda = base_item['valor_com_icms_venda'] * (1 - scenario['icms']) * (1 - 0.0925)
                total_sem_icms = base_item['peso_venda'] * valor_sem_icms_venda
                total_com_icms = base_item['peso_venda'] * base_item['valor_com_icms_venda']
                
                analysis.update({
                    "manual_valor_sem_icms_venda": valor_sem_icms_venda,
                    "manual_total_sem_icms": total_sem_icms,
                    "manual_total_com_icms": total_com_icms,
                })
                
                results.append(analysis)
                
                print(f"  API total_sale_value: R$ {result.get('total_sale_value', 0):.2f}")
                print(f"  Manual total SEM ICMS: R$ {total_sem_icms:.2f}")
                print(f"  Manual total COM ICMS: R$ {total_com_icms:.2f}")
                print(f"  Diferen√ßa sem/com ICMS: R$ {total_com_icms - total_sem_icms:.2f}")
                print()
                
            else:
                print(f"  ‚ùå Erro: {response.status_code}")
                
        except Exception as e:
            print(f"  ‚ùå Erro: {e}")
    
    # Analysis Summary
    print("=" * 60)
    print("RESUMO DA AN√ÅLISE")
    print("=" * 60)
    
    print("\n1. VALORES QUE N√ÉO MUDAM COM ICMS:")
    for result in results:
        print(f"   ICMS {result['icms_percentage']}: Total Sale Value = R$ {result['total_sale_value']:.2f}")
    
    print("\n2. VALORES QUE MUDAM COM ICMS (Manual - SEM ICMS):")
    for result in results:
        print(f"   ICMS {result['icms_percentage']}: Total SEM ICMS = R$ {result['manual_total_sem_icms']:.2f}")
    
    print("\n3. COMISS√ïES (baseadas no valor COM ICMS):")
    for result in results:
        print(f"   ICMS {result['icms_percentage']}: Comiss√£o = R$ {result['total_commission']:.2f}")
    
    # Determine what the API is actually returning
    print("\n4. CONCLUS√ÉO SOBRE O QUE A API RETORNA:")
    api_values = [r['total_sale_value'] for r in results]
    com_icms_values = [r['manual_total_com_icms'] for r in results]
    sem_icms_values = [r['manual_total_sem_icms'] for r in results]
    
    if all(abs(api_values[0] - v) < 0.01 for v in api_values):
        print("   ‚úÖ API retorna valor CONSTANTE (n√£o muda com ICMS)")
        
        if abs(api_values[0] - com_icms_values[0]) < 0.01:
            print("   ‚úÖ API usa valor COM ICMS (correto para comiss√µes)")
        elif abs(api_values[0] - sem_icms_values[0]) < 0.01:
            print("   ‚ö†Ô∏è  API usa valor SEM ICMS")
        else:
            print("   ‚ùì API usa algum outro c√°lculo")
    else:
        print("   ‚úÖ API retorna valor VARI√ÅVEL (muda com ICMS)")
    
    return results

def analyze_user_expectation():
    """
    Analyze what the user might be expecting to see
    """
    print("\n5. AN√ÅLISE DA EXPECTATIVA DO USU√ÅRIO:")
    print("=" * 50)
    
    print("\nO usu√°rio relatou: 'Total Venda n√£o est√° refletindo a atualiza√ß√£o do valor com a mudan√ßa do ICMS'")
    print("\nPoss√≠veis interpreta√ß√µes:")
    print("1. EXPECTATIVA INCORRETA: Usu√°rio espera que 'Total Venda' mude com ICMS")
    print("   ‚Üí Problema: Total COM ICMS n√£o deveria mudar quando % ICMS muda")
    print("   ‚Üí Solu√ß√£o: Educa√ß√£o do usu√°rio ou mudan√ßa de nomenclatura")
    print()
    print("2. EXPECTATIVA CORRETA: Usu√°rio quer ver impacto do ICMS em algum lugar")
    print("   ‚Üí Problema: Sistema n√£o mostra valor SEM ICMS que muda")
    print("   ‚Üí Solu√ß√£o: Adicionar campo 'Receita L√≠quida' (sem impostos)")
    print()
    print("3. BUG NO C√ÅLCULO: Sistema deveria mostrar valor SEM ICMS como 'Total Venda'")
    print("   ‚Üí Problema: Confus√£o sobre qual valor mostrar")
    print("   ‚Üí Solu√ß√£o: Clarificar se deve usar COM ou SEM ICMS")

def recommend_solution():
    """
    Recommend solution based on analysis
    """
    print("\n6. RECOMENDA√á√ÉO DE SOLU√á√ÉO:")
    print("=" * 40)
    
    print("\nBasado na an√°lise e nas especifica√ß√µes do sistema:")
    print()
    print("‚úÖ SITUA√á√ÉO ATUAL EST√Å CORRETA:")
    print("   - Total Sale usa valor COM ICMS")
    print("   - Comiss√µes calculadas sobre valor real pago pelo cliente")
    print("   - Consistente com regras de neg√≥cio implementadas")
    print()
    print("üí° MELHORIAS SUGERIDAS:")
    print("   1. Adicionar campo 'Receita L√≠quida' que mostra valor SEM impostos")
    print("   2. Clarificar nomenclatura: 'Total Faturado' vs 'Receita L√≠quida'")
    print("   3. Mostrar impacto fiscal: 'Impostos sobre Venda: R$ X,XX'")
    print("   4. Adicionar tooltip explicativo nos campos")
    print()
    print("üîß IMPLEMENTA√á√ÉO:")
    print("   - Manter 'Total Venda' atual (COM ICMS)")
    print("   - Adicionar 'Receita L√≠quida' (SEM ICMS) que muda com ICMS")
    print("   - Adicionar 'Impostos' = Total Venda - Receita L√≠quida")

if __name__ == "__main__":
    print("AN√ÅLISE DETALHADA: IMPACTO DO ICMS NO TOTAL DE VENDA")
    print("=" * 60)
    
    try:
        results = test_icms_impact_detailed()
        analyze_user_expectation()
        recommend_solution()
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {e}")
        sys.exit(1)