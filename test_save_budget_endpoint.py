#!/usr/bin/env python3
"""
Script para testar o endpoint de salvamento de or√ßamento e reproduzir erros
"""
import requests
import json
from datetime import datetime, timedelta
import sys

# Configura√ß√µes
BASE_URL = "http://localhost:8002"  # URL do servi√ßo de or√ßamentos
USER_SERVICE_URL = "http://localhost:8001"  # URL do servi√ßo de usu√°rios

def get_auth_token():
    """Obter token de autentica√ß√£o"""
    try:
        login_data = {
            "username": "admin",
            "password": "admin123"
        }
        
        print("üîê Fazendo login para obter token...")
        response = requests.post(f"{USER_SERVICE_URL}/api/v1/users/login", json=login_data)
        
        if response.status_code == 200:
            token_data = response.json()
            token = token_data.get("access_token")
            print(f"‚úÖ Token obtido com sucesso")
            return token
        else:
            print(f"‚ùå Erro ao fazer login: {response.status_code}")
            print(f"Resposta: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o de login: {e}")
        return None

def test_create_complete_budget(token):
    """Testar cria√ß√£o de or√ßamento completo"""
    print("\nüìã Testando cria√ß√£o de or√ßamento completo...")
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # Dados do or√ßamento completo
    budget_data = {
        "order_number": f"TEST-{datetime.now().strftime('%Y%m%d%H%M%S')}",
        "client_name": "Cliente Teste",
        "markup_percentage": 25.0,
        "notes": "Or√ßamento de teste para reprodu√ß√£o de erro",
        "expires_at": (datetime.now() + timedelta(days=30)).isoformat(),
        "items": [
            {
                "description": "Item Teste 1",
                "weight": 10.5,
                "purchase_icms_percentage": 0.17,
                "purchase_other_expenses": 0.0,
                "purchase_value_without_taxes": 100.0,
                "purchase_value_with_weight_diff": 105.0,
                "sale_weight": 10.8,
                "sale_icms_percentage": 0.17,
                "sale_value_without_taxes": 130.0,
                "weight_difference": 0.3,
                "commission_percentage": 0.015,
                "dunamis_cost": 120.0,
                "profitability": 25.0,
                "total_purchase": 105.0,
                "total_sale": 140.4,
                "unit_value": 13.0,
                "total_value": 140.4,
                "commission_value": 2.1
            },
            {
                "description": "Item Teste 2",
                "weight": 5.2,
                "purchase_icms_percentage": 0.17,
                "purchase_other_expenses": 2.5,
                "purchase_value_without_taxes": 50.0,
                "purchase_value_with_weight_diff": 52.6,
                "sale_weight": 5.3,
                "sale_icms_percentage": 0.17,
                "sale_value_without_taxes": 65.0,
                "weight_difference": 0.1,
                "commission_percentage": 0.015,
                "dunamis_cost": 62.8,
                "profitability": 20.0,
                "total_purchase": 55.1,
                "total_sale": 70.89,
                "unit_value": 13.38,
                "total_value": 70.89,
                "commission_value": 1.06
            }
        ]
    }
    
    try:
        print(f"Enviando requisi√ß√£o para: {BASE_URL}/api/v1/budgets/")
        print(f"Dados: {json.dumps(budget_data, indent=2, default=str)}")
        
        response = requests.post(
            f"{BASE_URL}/api/v1/budgets/",
            headers=headers,
            json=budget_data
        )
        
        print(f"\nüìä Status da resposta: {response.status_code}")
        print(f"üìÑ Headers da resposta: {dict(response.headers)}")
        
        try:
            response_json = response.json()
            print(f"üìÑ Conte√∫do da resposta (JSON):")
            print(json.dumps(response_json, indent=2, default=str))
        except:
            print(f"üìÑ Conte√∫do da resposta (texto):")
            print(f"'{response.text}'")
        
        if response.status_code == 201:
            print("‚úÖ Or√ßamento criado com sucesso!")
            return response.json()
        else:
            print("‚ùå Erro ao criar or√ßamento")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def test_create_simplified_budget(token):
    """Testar cria√ß√£o de or√ßamento simplificado"""
    print("\nüìã Testando cria√ß√£o de or√ßamento simplificado...")
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # Dados do or√ßamento simplificado
    budget_data = {
        "client_name": "Cliente Teste Simplificado",
        "notes": "Teste de or√ßamento simplificado",
        "expires_at": (datetime.now() + timedelta(days=30)).isoformat(),
        "items": [
            {
                "description": "Item Simples 1",
                "peso_compra": 10.5,
                "valor_com_icms_compra": 150.0,
                "percentual_icms_compra": 0.17,
                "outras_despesas_item": 0.0,
                "peso_venda": 10.8,
                "valor_com_icms_venda": 200.0,
                "percentual_icms_venda": 0.17
            },
            {
                "description": "Item Simples 2", 
                "peso_compra": 5.2,
                "valor_com_icms_compra": 80.0,
                "percentual_icms_compra": 0.17,
                "outras_despesas_item": 2.5,
                "peso_venda": 5.3,
                "valor_com_icms_venda": 110.0,
                "percentual_icms_venda": 0.17
            }
        ]
    }
    
    try:
        print(f"Enviando requisi√ß√£o para: {BASE_URL}/api/v1/budgets/simplified")
        print(f"Dados: {json.dumps(budget_data, indent=2, default=str)}")
        
        response = requests.post(
            f"{BASE_URL}/api/v1/budgets/simplified",
            headers=headers,
            json=budget_data
        )
        
        print(f"\nüìä Status da resposta: {response.status_code}")
        print(f"üìÑ Headers da resposta: {dict(response.headers)}")
        
        try:
            response_json = response.json()
            print(f"üìÑ Conte√∫do da resposta (JSON):")
            print(json.dumps(response_json, indent=2, default=str))
        except:
            print(f"üìÑ Conte√∫do da resposta (texto):")
            print(f"'{response.text}'")
        
        if response.status_code == 201:
            print("‚úÖ Or√ßamento simplificado criado com sucesso!")
            return response.json()
        else:
            print("‚ùå Erro ao criar or√ßamento simplificado")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def test_calculate_preview(token):
    """Testar c√°lculo de preview do or√ßamento"""
    print("\nüìã Testando c√°lculo de preview...")
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # Dados para c√°lculo
    budget_data = {
        "order_number": "PREVIEW-TEST",
        "client_name": "Cliente Preview",
        "markup_percentage": 30.0,
        "items": [
            {
                "description": "Preview Item",
                "weight": 8.0,
                "purchase_icms_percentage": 0.17,
                "purchase_other_expenses": 1.0,
                "purchase_value_without_taxes": 80.0,
                "sale_icms_percentage": 0.17,
                "sale_value_without_taxes": 110.0,
                "commission_percentage": 0.015
            }
        ]
    }
    
    try:
        print(f"Enviando requisi√ß√£o para: {BASE_URL}/api/v1/budgets/calculate")
        print(f"Dados: {json.dumps(budget_data, indent=2, default=str)}")
        
        response = requests.post(
            f"{BASE_URL}/api/v1/budgets/calculate",
            headers=headers,
            json=budget_data
        )
        
        print(f"\nüìä Status da resposta: {response.status_code}")
        print(f"üìÑ Headers da resposta: {dict(response.headers)}")
        
        try:
            response_json = response.json()
            print(f"üìÑ Conte√∫do da resposta (JSON):")
            print(json.dumps(response_json, indent=2, default=str))
        except:
            print(f"üìÑ Conte√∫do da resposta (texto):")
            print(f"'{response.text}'")
        
        if response.status_code == 200:
            print("‚úÖ C√°lculo realizado com sucesso!")
            return response.json()
        else:
            print("‚ùå Erro no c√°lculo")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def test_health_check():
    """Verificar se os servi√ßos est√£o funcionando"""
    print("üè• Verificando sa√∫de dos servi√ßos...")
    
    services = [
        ("Budget Service", f"{BASE_URL}/api/v1/budgets/markup-settings"),
        ("User Service", f"{USER_SERVICE_URL}/api/v1/auth/health" if "health" in USER_SERVICE_URL else f"{USER_SERVICE_URL}/docs")
    ]
    
    for service_name, url in services:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code in [200, 404]:  # 404 pode ser esperado para algumas rotas
                print(f"‚úÖ {service_name}: OK (Status: {response.status_code})")
            else:
                print(f"‚ö†Ô∏è {service_name}: Status {response.status_code}")
        except Exception as e:
            print(f"‚ùå {service_name}: Erro - {e}")

def main():
    """Fun√ß√£o principal"""
    print("üß™ TESTE DO ENDPOINT DE OR√áAMENTOS")
    print("=" * 50)
    
    # Verificar sa√∫de dos servi√ßos
    test_health_check()
    
    # Obter token de autentica√ß√£o
    token = get_auth_token()
    if not token:
        print("‚ùå N√£o foi poss√≠vel obter token. Verifique se o servi√ßo de usu√°rios est√° rodando.")
        return
    
    # Executar testes
    print("\nüöÄ Iniciando testes dos endpoints...")
    
    # Teste 1: C√°lculo de preview
    preview_result = test_calculate_preview(token)
    
    # Teste 2: Or√ßamento simplificado
    simplified_result = test_create_simplified_budget(token)
    
    # Teste 3: Or√ßamento completo
    complete_result = test_create_complete_budget(token)
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìã RESUMO DOS TESTES:")
    print(f"Preview de c√°lculo: {'‚úÖ OK' if preview_result else '‚ùå FALHOU'}")
    print(f"Or√ßamento simplificado: {'‚úÖ OK' if simplified_result else '‚ùå FALHOU'}")
    print(f"Or√ßamento completo: {'‚úÖ OK' if complete_result else '‚ùå FALHOU'}")
    
    if not any([preview_result, simplified_result, complete_result]):
        print("\n‚ùå TODOS OS TESTES FALHARAM - Verifique os logs acima para detalhes do erro")
        sys.exit(1)
    else:
        print("\n‚úÖ Pelo menos um teste passou!")

if __name__ == "__main__":
    main()
