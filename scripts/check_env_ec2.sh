#!/bin/bash

# Script para verificar se o arquivo .env.prod existe e est√° configurado corretamente
# Este script deve ser executado no diret√≥rio raiz do projeto na inst√¢ncia EC2

set -e

echo "üîç VERIFICANDO CONFIGURA√á√ÉO DO AMBIENTE EC2"
echo "==========================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "docker-compose.prod.yml" ]; then
    echo "‚ùå Arquivo docker-compose.prod.yml n√£o encontrado!"
    echo "Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

echo "‚úÖ Diret√≥rio correto identificado"

# Verificar se o arquivo .env.prod existe
if [ ! -f ".env.prod" ]; then
    echo "‚ùå PROBLEMA IDENTIFICADO: Arquivo .env.prod n√£o encontrado!"
    echo ""
    echo "üîß SOLU√á√ïES:"
    echo "1. Copie o arquivo .env.prod para a inst√¢ncia EC2:"
    echo "   scp .env.prod ec2-user@SEU_IP_EC2:/caminho/para/projeto/"
    echo ""
    echo "2. Ou crie o arquivo .env.prod manualmente:"
    echo "   nano .env.prod"
    echo ""
    echo "3. Conte√∫do m√≠nimo necess√°rio:"
    echo "   POSTGRES_PASSWORD=crm_strong_password_2024"
    echo "   REDIS_PASSWORD=redis_strong_password_2024"
    echo "   SECRET_KEY=9372b96b078a8471d27f3cf16ad4834bf6b49a987b9b68a0bd0bd2686ae160cc"
    echo "   DOMAIN=loen.digital"
    echo ""
    exit 1
fi

echo "‚úÖ Arquivo .env.prod encontrado!"

# Verificar vari√°veis cr√≠ticas
echo ""
echo "üîç Verificando vari√°veis cr√≠ticas..."

CRITICAL_VARS=("POSTGRES_PASSWORD" "REDIS_PASSWORD" "SECRET_KEY" "DOMAIN")
MISSING_VARS=()

for var in "${CRITICAL_VARS[@]}"; do
    if ! grep -q "^${var}=" .env.prod; then
        MISSING_VARS+=("$var")
    fi
done

if [ ${#MISSING_VARS[@]} -ne 0 ]; then
    echo "‚ùå Vari√°veis cr√≠ticas ausentes no .env.prod:"
    for var in "${MISSING_VARS[@]}"; do
        echo "  - $var"
    done
    echo ""
    echo "üîß Adicione essas vari√°veis ao arquivo .env.prod"
    exit 1
fi

echo "‚úÖ Todas as vari√°veis cr√≠ticas est√£o presentes!"

# Testar carregamento das vari√°veis
echo ""
echo "üîß Testando carregamento das vari√°veis..."
set -a  # Automatically export all variables
source .env.prod
set +a  # Stop automatically exporting

if [ -z "$POSTGRES_PASSWORD" ]; then
    echo "‚ùå Erro ao carregar POSTGRES_PASSWORD"
    exit 1
fi

if [ -z "$REDIS_PASSWORD" ]; then
    echo "‚ùå Erro ao carregar REDIS_PASSWORD"
    exit 1
fi

echo "‚úÖ Vari√°veis carregadas com sucesso!"

# Verificar conectividade com containers
echo ""
echo "üîç Verificando containers Docker..."

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o est√° instalado!"
    exit 1
fi

# Verificar se os containers est√£o rodando
REQUIRED_SERVICES=("postgres" "redis")
MISSING_SERVICES=()

for service in "${REQUIRED_SERVICES[@]}"; do
    if ! docker-compose -f docker-compose.prod.yml ps | grep -q "$service"; then
        MISSING_SERVICES+=("$service")
    fi
done

if [ ${#MISSING_SERVICES[@]} -ne 0 ]; then
    echo "‚ö†Ô∏è Os seguintes containers n√£o est√£o rodando: ${MISSING_SERVICES[*]}"
    echo "Execute: docker-compose -f docker-compose.prod.yml up -d"
else
    echo "‚úÖ Todos os containers necess√°rios est√£o rodando!"
fi

# Testar conectividade com PostgreSQL
echo ""
echo "üîó Testando conectividade com PostgreSQL..."
if docker-compose -f docker-compose.prod.yml exec postgres pg_isready -U crm_user -d crm_ditual; then
    echo "‚úÖ PostgreSQL acess√≠vel!"
else
    echo "‚ùå PostgreSQL n√£o est√° acess√≠vel!"
    echo "Verifique os logs: docker-compose -f docker-compose.prod.yml logs postgres"
fi

echo ""
echo "üéâ VERIFICA√á√ÉO CONCLU√çDA!"
echo "========================"
echo ""
echo "üìã Status:"
echo "  ‚úÖ Arquivo .env.prod: OK"
echo "  ‚úÖ Vari√°veis cr√≠ticas: OK"
echo "  ‚úÖ Carregamento de vari√°veis: OK"
echo ""
echo "üöÄ Pr√≥ximos passos:"
echo "  1. Execute as migra√ß√µes: ./scripts/run_all_migrations_ec2.sh"
echo "  2. Crie o usu√°rio admin: ./scripts/create_admin_ec2.sh"