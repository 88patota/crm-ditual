#!/bin/bash

# Script para executar migra√ß√µes do budget_service no ambiente EC2
# Este script deve ser executado no diret√≥rio raiz do projeto

set -e

echo "üóÑÔ∏è Executando migra√ß√µes do budget_service no ambiente EC2..."

# Verificar se docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o est√° instalado!"
    exit 1
fi

# Verificar se o arquivo docker-compose.prod.yml existe
if [ ! -f "docker-compose.prod.yml" ]; then
    echo "‚ùå Arquivo docker-compose.prod.yml n√£o encontrado!"
    echo "Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

# Verificar se o arquivo .env.prod existe
if [ ! -f ".env.prod" ]; then
    echo "‚ùå Arquivo .env.prod n√£o encontrado!"
    echo "Este arquivo √© necess√°rio para as vari√°veis de ambiente."
    echo "Certifique-se de que o arquivo .env.prod est√° presente no diret√≥rio raiz."
    exit 1
fi

echo "‚úÖ Arquivo .env.prod encontrado!"

# Carregar vari√°veis de ambiente do .env.prod
echo "üîß Carregando vari√°veis de ambiente..."
set -a  # Automatically export all variables
source .env.prod
set +a  # Stop automatically exporting

# Verificar se os containers est√£o rodando
echo "üîç Verificando status dos containers..."
if ! docker-compose -f docker-compose.prod.yml ps | grep -q "budget_service"; then
    echo "‚ùå Container budget_service n√£o est√° rodando!"
    echo "Execute: docker-compose -f docker-compose.prod.yml up -d"
    exit 1
fi

if ! docker-compose -f docker-compose.prod.yml ps | grep -q "postgres"; then
    echo "‚ùå Container postgres n√£o est√° rodando!"
    echo "Execute: docker-compose -f docker-compose.prod.yml up -d"
    exit 1
fi

# Aguardar servi√ßos estarem prontos
echo "‚è≥ Aguardando servi√ßos estarem prontos..."
sleep 5

# Verificar conectividade com o banco
echo "üîó Testando conectividade com o banco de dados..."
docker-compose -f docker-compose.prod.yml exec postgres pg_isready -U crm_user -d crm_db
if [ $? -ne 0 ]; then
    echo "‚ùå Banco de dados n√£o est√° acess√≠vel!"
    exit 1
fi

echo "‚úÖ Banco de dados acess√≠vel!"

# Executar migra√ß√µes do budget_service
echo "üöÄ Executando migra√ß√µes do budget_service..."
docker-compose -f docker-compose.prod.yml exec budget_service alembic upgrade head

if [ $? -eq 0 ]; then
    echo "‚úÖ Migra√ß√µes do budget_service executadas com sucesso!"
    echo ""
    echo "üìã Resumo das migra√ß√µes aplicadas:"
    echo "  - Servi√ßo: budget_service"
    echo "  - 001_convert_to_numeric.py: Convers√£o de campos Float para Numeric (precis√£o monet√°ria)"
    echo "  - 002_create_budget_status_enum.py: Cria√ß√£o do enum BudgetStatus"
    echo "  - 003_convert_status_to_string.py: Convers√£o do status de enum para string"
    echo "  - 004_add_business_rules_fields.py: Adi√ß√£o de campos de regras de neg√≥cio"
    echo "  - 005_add_commission_percentage_actual.py: Adi√ß√£o de percentual de comiss√£o atual"
    echo "  - 005_remove_quantity_column.py: Remo√ß√£o da coluna quantity"
    echo "  - 006_add_ipi_fields_to_budgets.py: Adi√ß√£o de campos IPI aos or√ßamentos"
    echo "  - 006_rename_columns_to_english.py: Renomea√ß√£o de colunas para ingl√™s"
    echo "  - 007_fonte_da_verdade_inicial.py: Configura√ß√£o inicial da fonte da verdade"
    echo "  - 008_add_ipi_fields_to_budget_items.py: Adi√ß√£o de campos IPI aos itens do or√ßamento"
    echo "  - 009_add_delivery_time_to_budget_items.py: Adi√ß√£o de tempo de entrega aos itens"
    echo "  - 010_add_freight_type_to_budgets.py: Adi√ß√£o de tipo de frete aos or√ßamentos"
    echo "  - 20250915_124515_add_total_sale_with_icms.py: Adi√ß√£o de total de venda com ICMS"
    echo ""
    echo "üìä Tabelas criadas/modificadas:"
    echo "  - budgets: Tabela principal de or√ßamentos"
    echo "  - budget_items: Itens dos or√ßamentos"
    echo ""
else
    echo "‚ùå Erro ao executar migra√ß√µes do budget_service!"
    echo ""
    echo "üîß Troubleshooting:"
    echo "  1. Verifique se o container budget_service est√° rodando:"
    echo "     docker-compose -f docker-compose.prod.yml ps"
    echo ""
    echo "  2. Verifique os logs do budget_service:"
    echo "     docker-compose -f docker-compose.prod.yml logs budget_service"
    echo ""
    echo "  3. Verifique a conectividade com o banco:"
    echo "     docker-compose -f docker-compose.prod.yml exec postgres psql -U crm_user -d crm_db -c '\\dt'"
    echo ""
    echo "  4. Verifique se h√° conflitos de migra√ß√£o:"
    echo "     docker-compose -f docker-compose.prod.yml exec budget_service alembic current"
    echo "     docker-compose -f docker-compose.prod.yml exec budget_service alembic history"
    echo ""
    exit 1
fi

echo "üéâ Migra√ß√µes do budget_service conclu√≠das!"