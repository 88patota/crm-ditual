#!/bin/bash

# Script unificado para executar todas as migra√ß√µes no ambiente EC2
# Este script executa migra√ß√µes do user_service e budget_service em sequ√™ncia
# Deve ser executado no diret√≥rio raiz do projeto

set -e

echo "üöÄ Executando todas as migra√ß√µes do CRM no ambiente EC2..."
echo "=================================================="

# Verificar se docker-compose est√° dispon√≠vel
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    echo "‚ùå docker-compose ou docker compose n√£o est√° instalado!"
    exit 1
fi

# Verificar se o arquivo docker-compose.prod.yml existe
if [ ! -f "docker-compose.prod.yml" ]; then
    echo "‚ùå Arquivo docker-compose.prod.yml n√£o encontrado!"
    echo "Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

# Verificar se o arquivo .env.prod existe
if [ ! -f ".env.prod" ]; then
    echo "‚ùå Arquivo .env.prod n√£o encontrado!"
    echo "Este arquivo √© necess√°rio para as vari√°veis de ambiente."
    echo "Certifique-se de que o arquivo .env.prod est√° presente no diret√≥rio raiz."
    exit 1
fi

echo "‚úÖ Arquivo .env.prod encontrado!"

# Carregar vari√°veis de ambiente do .env.prod
echo "üîß Carregando vari√°veis de ambiente..."
set -a  # Automatically export all variables
source .env.prod
set +a  # Stop automatically exporting

# Verificar se todos os containers necess√°rios est√£o rodando
echo "üîç Verificando status dos containers..."
REQUIRED_SERVICES=("postgres" "user_service" "budget_service")
MISSING_SERVICES=()

for service in "${REQUIRED_SERVICES[@]}"; do
    if ! ${DOCKER_COMPOSE} -f docker-compose.prod.yml ps | grep -q "$service"; then
        MISSING_SERVICES+=("$service")
    fi
done

if [ ${#MISSING_SERVICES[@]} -ne 0 ]; then
    echo "‚ùå Os seguintes containers n√£o est√£o rodando: ${MISSING_SERVICES[*]}"
    echo "Execute: ${DOCKER_COMPOSE} -f docker-compose.prod.yml up -d"
    exit 1
fi

echo "‚úÖ Todos os containers necess√°rios est√£o rodando!"

# Aguardar servi√ßos estarem prontos
echo "‚è≥ Aguardando servi√ßos estarem prontos..."
sleep 15

# Verificar conectividade com o banco usando as vari√°veis corretas
echo "üîó Testando conectividade com o banco de dados..."
${DOCKER_COMPOSE} -f docker-compose.prod.yml exec postgres pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
if [ $? -ne 0 ]; then
    echo "‚ùå Banco de dados n√£o est√° acess√≠vel!"
    echo "üîß Tentando recriar o banco de dados..."
    
    # Recriar banco se necess√°rio
    ${DOCKER_COMPOSE} -f docker-compose.prod.yml exec postgres psql -U postgres -c "DROP DATABASE IF EXISTS ${POSTGRES_DB};"
    ${DOCKER_COMPOSE} -f docker-compose.prod.yml exec postgres psql -U postgres -c "CREATE DATABASE ${POSTGRES_DB} OWNER ${POSTGRES_USER};"
    ${DOCKER_COMPOSE} -f docker-compose.prod.yml exec postgres psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO ${POSTGRES_USER};"
    
    # Testar novamente
    ${DOCKER_COMPOSE} -f docker-compose.prod.yml exec postgres pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
    if [ $? -ne 0 ]; then
        echo "‚ùå Ainda n√£o foi poss√≠vel conectar ao banco!"
        exit 1
    fi
fi

echo "‚úÖ Banco de dados acess√≠vel!"

# Verificar se o usu√°rio e senha est√£o corretos
echo "üîê Verificando autentica√ß√£o do usu√°rio..."
${DOCKER_COMPOSE} -f docker-compose.prod.yml exec postgres psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "SELECT 1;" > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "‚ùå Falha na autentica√ß√£o! Corrigindo senha do usu√°rio..."
    ${DOCKER_COMPOSE} -f docker-compose.prod.yml exec postgres psql -U postgres -c "ALTER USER ${POSTGRES_USER} WITH PASSWORD '${POSTGRES_PASSWORD}';"
    
    # Testar novamente
    ${DOCKER_COMPOSE} -f docker-compose.prod.yml exec postgres psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c "SELECT 1;" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "‚ùå Ainda h√° problemas de autentica√ß√£o!"
        exit 1
    fi
fi

echo "‚úÖ Autentica√ß√£o funcionando corretamente!"
echo ""

# Executar migra√ß√µes do user_service
echo "üë§ EXECUTANDO MIGRA√á√ïES DO USER_SERVICE"
echo "======================================="
${DOCKER_COMPOSE} -f docker-compose.prod.yml exec user_service alembic upgrade head

if [ $? -eq 0 ]; then
    echo "‚úÖ Migra√ß√µes do user_service executadas com sucesso!"
    echo ""
else
    echo "‚ùå Erro ao executar migra√ß√µes do user_service!"
    echo "Abortando execu√ß√£o das demais migra√ß√µes."
    exit 1
fi

# Executar migra√ß√µes do budget_service
echo "üí∞ EXECUTANDO MIGRA√á√ïES DO BUDGET_SERVICE"
echo "========================================="
${DOCKER_COMPOSE} -f docker-compose.prod.yml exec budget_service alembic upgrade head

if [ $? -eq 0 ]; then
    echo "‚úÖ Migra√ß√µes do budget_service executadas com sucesso!"
    echo ""
else
    echo "‚ùå Erro ao executar migra√ß√µes do budget_service!"
    exit 1
fi

# Verificar estado final das migra√ß√µes
echo "üîç VERIFICANDO ESTADO FINAL DAS MIGRA√á√ïES"
echo "========================================"

echo "üìä Estado das migra√ß√µes do user_service:"
${DOCKER_COMPOSE} -f docker-compose.prod.yml exec user_service alembic current

echo ""
echo "üìä Estado das migra√ß√µes do budget_service:"
${DOCKER_COMPOSE} -f docker-compose.prod.yml exec budget_service alembic current

echo ""
echo "üóÑÔ∏è Verificando tabelas criadas no banco de dados:"
${DOCKER_COMPOSE} -f docker-compose.prod.yml exec postgres psql -U crm_user -d crm_ditual -c "\\dt"

echo ""
echo "üéâ TODAS AS MIGRA√á√ïES EXECUTADAS COM SUCESSO!"
echo "============================================="
echo ""
echo "üìã Resumo do que foi executado:"
echo "  ‚úÖ user_service: Tabela 'users' criada com campos de autentica√ß√£o e autoriza√ß√£o"
echo "  ‚úÖ budget_service: Tabelas 'budgets' e 'budget_items' criadas com todas as funcionalidades"
echo ""
echo "üîß Pr√≥ximos passos:"
echo "  1. Criar usu√°rio admin: ./scripts/create_admin_ec2.sh"
echo "  2. Testar acesso ao sistema via frontend"
echo "  3. Verificar logs dos servi√ßos: ${DOCKER_COMPOSE} -f docker-compose.prod.yml logs"
echo ""
echo "üìö Para mais informa√ß√µes, consulte:"
echo "  - CREATE_ADMIN_README.md (cria√ß√£o de usu√°rio admin)"
echo "  - ${DOCKER_COMPOSE} -f docker-compose.prod.yml logs [service_name] (logs espec√≠ficos)"